name: Build for windows, mac, and linux

on:
  push:
    branches: [build/workflow]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  windows:
    name: windows/msvc
    runs-on: windows-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Create a build directory
        run: |
          mkdir build

      - name: Install dependencies
        working-directory: ./build
        run: |
          conan install ..

      - name: Create Build Environment & Configure Cmake
        shell: bash
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          cmake -B build                   \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        run: cmake --build build

  macos:
    name: ${{ matrix.buildname }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            buildname: "macos/clang"
            triplet: x64-osx
            compiler: clang_64

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Create a build directory
        run: |
          mkdir build

      - name: Install dependencies
        working-directory: ./build
        run: |
          conan install ..

      - name: Create Build Environment & Configure Cmake
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          cmake -B build                   \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ./build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: make -j $(nproc)
